// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/telkomsel/ticket/transaction-service/internal/usecase/transaction_usecase.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/telkomsel/ticket/transaction-service/internal/usecase/transaction_usecase.go -destination=D:/golang/src/telkomsel/ticket/transaction-service/mock/transaction_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/SyamSolution/transaction-service/internal/model"
	snap "github.com/midtrans/midtrans-go/snap"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionExecutor is a mock of TransactionExecutor interface.
type MockTransactionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionExecutorMockRecorder
}

// MockTransactionExecutorMockRecorder is the mock recorder for MockTransactionExecutor.
type MockTransactionExecutorMockRecorder struct {
	mock *MockTransactionExecutor
}

// NewMockTransactionExecutor creates a new mock instance.
func NewMockTransactionExecutor(ctrl *gomock.Controller) *MockTransactionExecutor {
	mock := &MockTransactionExecutor{ctrl: ctrl}
	mock.recorder = &MockTransactionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionExecutor) EXPECT() *MockTransactionExecutorMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionExecutor) CreateTransaction(request model.TransactionRequest, user model.User) (*snap.Response, float32, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", request, user)
	ret0, _ := ret[0].(*snap.Response)
	ret1, _ := ret[1].(float32)
	ret2, _ := ret[2].(float32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionExecutorMockRecorder) CreateTransaction(request, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionExecutor)(nil).CreateTransaction), request, user)
}

// GetListTransaction mocks base method.
func (m *MockTransactionExecutor) GetListTransaction(request model.TransactionListRequest) ([]model.TransactionListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransaction", request)
	ret0, _ := ret[0].([]model.TransactionListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransaction indicates an expected call of GetListTransaction.
func (mr *MockTransactionExecutorMockRecorder) GetListTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransaction", reflect.TypeOf((*MockTransactionExecutor)(nil).GetListTransaction), request)
}

// GetTransactionByOrderID mocks base method.
func (m *MockTransactionExecutor) GetTransactionByOrderID(orderID string) (model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByOrderID", orderID)
	ret0, _ := ret[0].(model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByOrderID indicates an expected call of GetTransactionByOrderID.
func (mr *MockTransactionExecutorMockRecorder) GetTransactionByOrderID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByOrderID", reflect.TypeOf((*MockTransactionExecutor)(nil).GetTransactionByOrderID), orderID)
}

// GetTransactionByTransactionID mocks base method.
func (m *MockTransactionExecutor) GetTransactionByTransactionID(transactionID int, email string) (model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByTransactionID", transactionID, email)
	ret0, _ := ret[0].(model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByTransactionID indicates an expected call of GetTransactionByTransactionID.
func (mr *MockTransactionExecutorMockRecorder) GetTransactionByTransactionID(transactionID, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByTransactionID", reflect.TypeOf((*MockTransactionExecutor)(nil).GetTransactionByTransactionID), transactionID, email)
}

// UpdateTransactionStatus mocks base method.
func (m *MockTransactionExecutor) UpdateTransactionStatus(orderID, status, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", orderID, status, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockTransactionExecutorMockRecorder) UpdateTransactionStatus(orderID, status, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockTransactionExecutor)(nil).UpdateTransactionStatus), orderID, status, email)
}
