// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/telkomsel/ticket/transaction-service/internal/repository/transaction_repository.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/telkomsel/ticket/transaction-service/internal/repository/transaction_repository.go -destination=D:/golang/src/telkomsel/ticket/transaction-service/mock/internal/transaction_repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/SyamSolution/transaction-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionPersister is a mock of TransactionPersister interface.
type MockTransactionPersister struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionPersisterMockRecorder
}

// MockTransactionPersisterMockRecorder is the mock recorder for MockTransactionPersister.
type MockTransactionPersisterMockRecorder struct {
	mock *MockTransactionPersister
}

// NewMockTransactionPersister creates a new mock instance.
func NewMockTransactionPersister(ctrl *gomock.Controller) *MockTransactionPersister {
	mock := &MockTransactionPersister{ctrl: ctrl}
	mock.recorder = &MockTransactionPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionPersister) EXPECT() *MockTransactionPersisterMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionPersister) CreateTransaction(transaction model.Transaction, detailTransaction []model.DetailTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction, detailTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionPersisterMockRecorder) CreateTransaction(transaction, detailTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionPersister)(nil).CreateTransaction), transaction, detailTransaction)
}

// GetDetailTransactionByTransactionID mocks base method.
func (m *MockTransactionPersister) GetDetailTransactionByTransactionID(transactionID int) ([]model.DetailTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailTransactionByTransactionID", transactionID)
	ret0, _ := ret[0].([]model.DetailTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailTransactionByTransactionID indicates an expected call of GetDetailTransactionByTransactionID.
func (mr *MockTransactionPersisterMockRecorder) GetDetailTransactionByTransactionID(transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailTransactionByTransactionID", reflect.TypeOf((*MockTransactionPersister)(nil).GetDetailTransactionByTransactionID), transactionID)
}

// GetDistinctContinentTransaction mocks base method.
func (m *MockTransactionPersister) GetDistinctContinentTransaction(email string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistinctContinentTransaction", email)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistinctContinentTransaction indicates an expected call of GetDistinctContinentTransaction.
func (mr *MockTransactionPersisterMockRecorder) GetDistinctContinentTransaction(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistinctContinentTransaction", reflect.TypeOf((*MockTransactionPersister)(nil).GetDistinctContinentTransaction), email)
}

// GetListTransaction mocks base method.
func (m *MockTransactionPersister) GetListTransaction(request model.TransactionListRequest) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransaction", request)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransaction indicates an expected call of GetListTransaction.
func (mr *MockTransactionPersisterMockRecorder) GetListTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransaction", reflect.TypeOf((*MockTransactionPersister)(nil).GetListTransaction), request)
}

// GetTransactionByOrderID mocks base method.
func (m *MockTransactionPersister) GetTransactionByOrderID(orderID string) (model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByOrderID", orderID)
	ret0, _ := ret[0].(model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByOrderID indicates an expected call of GetTransactionByOrderID.
func (mr *MockTransactionPersisterMockRecorder) GetTransactionByOrderID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByOrderID", reflect.TypeOf((*MockTransactionPersister)(nil).GetTransactionByOrderID), orderID)
}

// GetTransactionByTransactionID mocks base method.
func (m *MockTransactionPersister) GetTransactionByTransactionID(transactionID int, email string) (model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByTransactionID", transactionID, email)
	ret0, _ := ret[0].(model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByTransactionID indicates an expected call of GetTransactionByTransactionID.
func (mr *MockTransactionPersisterMockRecorder) GetTransactionByTransactionID(transactionID, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByTransactionID", reflect.TypeOf((*MockTransactionPersister)(nil).GetTransactionByTransactionID), transactionID, email)
}

// UpdateTransactionStatus mocks base method.
func (m *MockTransactionPersister) UpdateTransactionStatus(orderID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockTransactionPersisterMockRecorder) UpdateTransactionStatus(orderID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockTransactionPersister)(nil).UpdateTransactionStatus), orderID, status)
}
